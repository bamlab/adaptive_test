import 'package:adaptive_test/src/adaptive/window_config_data/window_config_data.dart';
import 'package:adaptive_test/src/adaptive/window_size.dart';
import 'package:flutter/material.dart';

/// Singleton class that configures global variables for the test.
///
/// Notably:
/// * `enforcedTestPlatform`, see [TargetPlatform].
/// * `deviceVariant`, see [WindowVariant] and [WindowConfigData].
///
/// Configure those variables in the [testExecutable] function inside the
/// `flutter_test_config.dart` file.
///
/// See: https://api.flutter.dev/flutter/flutter_test/flutter_test-library.html
class AdaptiveTestConfiguration {
  AdaptiveTestConfiguration._privateConstructor();

  static final AdaptiveTestConfiguration instance =
      AdaptiveTestConfiguration._privateConstructor();

  TargetPlatform? _enforcedTestPlatform;

  TargetPlatform? get enforcedTestPlatform => _enforcedTestPlatform;

  /// Images generated by golden test can have slight differences between the
  /// tests runtime platforms. Use this to enforce a specific platform across
  /// your team.
  ///
  /// Eg [TargetPlatform.linux], [TargetPlatform.macOS],
  /// [TargetPlatform.windows].
  void setEnforcedTestPlatform(TargetPlatform enforcedTestPlatform) {
    _enforcedTestPlatform = enforcedTestPlatform;
  }

  bool _failTestOnWrongPlatform = true;

  bool get failTestOnWrongPlatform => _failTestOnWrongPlatform;

  /// When using [enforcedTestPlatform], the default behavior is that the test
  /// will fail if the runtime platform the test is running on does not match
  /// the [enforcedTestPlatform].
  ///
  /// Setting [failTestOnWrongPlatform] to false will skip the test instead of
  /// failing it.
  void setFailTestOnWrongPlatform(bool failTestOnWrongPlatform) {
    _failTestOnWrongPlatform = failTestOnWrongPlatform;
  }

  WindowVariant? _deviceVariant;

  WindowVariant get deviceVariant {
    final scopedDeviceVariant = _deviceVariant;
    if (scopedDeviceVariant == null) {
      throw Exception(
        '''
Device variant is not set.
please set it first in the [testExecutable] method.
See: https://api.flutter.dev/flutter/flutter_test/flutter_test-library.html
''',
      );
    }

    return scopedDeviceVariant;
  }

  /// Set the devices variant on which you want your test to run.
  ///
  /// Eg [iPhone8], [iPhone13], [iPhone16], [iPadPro], [desktop], [pixel5], [pixel9].
  void setDeviceVariants(Set<WindowConfigData> deviceConfigs) {
    _deviceVariant = WindowVariant(deviceConfigs);
  }
}
